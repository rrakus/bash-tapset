/* bash tapset
 * author: Roman Rakus <rrakus@redhat.com>
 * Needs systemtap newer then version 1.6
 * How to compile?
 * make "CPPFLAGS=-D_GNU_SOURCE -DRECYCLES_PIDS -DSTAP_SDT_ARG_CONSTRAINT=r  `getconf LFS_CFLAGS`"
*/

/*
 * TODO
 * command types, convert to marks
 * child process fork/exec/wait
 * child process job control - foregrounding, backgrounding, signaling
 * work with variables
 */

/* arguments set by various probes
 * Just an indexed array
 */
global bash_args

/*
 * Clauses, set in case statements
 * 2D array
 */
global bash_clauses

probe bash_main_start = process("bash").begin
{
  probestr = sprintf("bash with pid %d started", pid())
}

probe bash_main_end = process("bash").end
{
  probestr = sprintf("bash with pid %d ended", pid())
}

/*
 * Track all command executions.
 * There are several command types (command.h, enum command_type)
 * type = the type of the command, one of the following
 * 0 = For, 1 = Case, 2 = While, 3 = If, 4 = Simple, 5 = Select,
 * 6 = Connection, 7 = Function_def, 8 = Until, 9 = Group,
 * 10 = Arith, 11 = Cond, 12 = Arith_for, 13 = Subshell, 14 = Coproc
 * line = line number the command starts on
 */
probe bash_command_call = process("bash").mark("execute_command")
{
  line=$arg1
  type = -1
  null_command = $arg2 == 0x0
  if ($arg2 != 0x0)
    type = @cast($arg2, "COMMAND")->type
}

probe bash_command_select_call = process("bash").mark("execute_select_command")
{
  delete bash_args
  line=$arg1
  variable = user_string(@cast($arg2, "SELECT_COM")->name->word)
  words = @cast($arg2, "SELECT_COM")->map_list
  for(argc = -1; words != 0x0;)
  {
    argc++
    word = @cast(words, "WORD_LIST")->word->word
    bash_args[argc] = user_string(word)
    words = @cast(words, "WORD_LIST")->next
  }
  action_type = @cast($arg2, "SELECT_COM")->action->type
}

probe bash_command_simple_call = process("bash").mark("execute_simple_command")
{
  delete bash_args
  words = @cast($arg2, "SIMPLE_COM")->words
  line = $arg1
  for(argc = -1; words != 0x0;)
  {
    argc++
    word = @cast(words, "WORD_LIST")->word->word
    bash_args[argc] = user_string(word)
    words = @cast(words, "WORD_LIST")->next
  }
}

probe bash_command_if_call = process("bash").mark("execute_if_command")
{
  line=$arg1
  /* Nothing? There are test, true_case and false_case COMMANDs */
}

probe bash_command_while_call = process("bash").mark("execute_while_or_until")
{
  /* Nothing? There is test COMMAND and action COMMAND */
}

/*
 * Track all case command calls.
 * case_word = a word which is tested
 * bash_clauses = 2D array of clauses to which is word tested
 */
probe bash_command_case_call = process("bash").mark("execute_case_command")
{
  delete bash_clauses
  line=$arg1
  case_word = user_string(@cast($arg2, "CASE_COM")->word->word)
  clause = @cast($arg2, "CASE_COM")->clauses
  clausec = -1
  while (clause != 0x0)
  {
    clausec++
    words = @cast(clause, "PATTERN_LIST")->patterns
    for(argc = -1; words != 0x0;)
    {
      argc++
      word = @cast(words, "WORD_LIST")->word->word
      bash_clauses[clausec,argc] = user_string(word)
      words = @cast(words, "WORD_LIST")->next
    }
    clause = @cast(clause, "PATTERN_LIST")->next
  }
}

/*
 * Track all for command calls.
 * variable = Variable name to get mapped over
 * args = The things to map over
 * action_type = The type of action to be done
 */
probe bash_command_for_call = process("bash").mark("execute_for_command")
{
  delete bash_args
  line=$arg1
  variable = user_string(@cast($arg2, "FOR_COM")->name->word)
  /* Word list, save them as args, use argc to count them */
  words = @cast($arg2, "FOR_COM")->map_list
  for(argc = -1; words != 0x0;)
  {
    argc++
    word = @cast(words, "WORD_LIST")->word->word
    bash_args[argc] = user_string(word)
    words = @cast(words, "WORD_LIST")->next
  }
  action_type = @cast($arg2, "FOR_COM")->action->type
}

/*
 * what is parsed?
 */
probe bash_parse = process("bash").mark("parse_and_execute")
{
  line=$arg1
  tokens = user_string($arg2)
  file = user_string($arg3)
}

/*
 * Track all shell function calls (shell functions, not C functions)
 * name = The name of the function
 * argc = Count of arguments (one or more, first is name of the function)
 * bash_args = Array of arguments to function.
 * Keep in mind MAXSTRINGLEN. Arguments string can be longer.
 */
probe bash_function_call = process("bash").mark("execute_function")
{
  delete bash_args
  line = $arg1
  name = user_string(@cast($arg2, "SHELL_VAR")->name)
  words = $arg3
  for(argc = -1; words != 0x0;)
  {
    argc++
    word = @cast(words, "WORD_LIST")->word->word
    bash_args[argc] = user_string(word)
    words = @cast(words, "WORD_LIST")->next
  }
}

/*
 * Track all shell builtin calls
 * name = The name of the C function which is called for this builtin
 * argc = Count of arguments (one or more, first is name of the builtin)
 * bash_args = Array of arguments to builtin
 * Keep in mind MAXSTRINGLEN. Arguments string can be longer.
 */
probe bash_builtin_call = process("bash").mark("execute_builtin")
{
  delete bash_args
  line=$arg1
  name = usymname($arg2)
  words = $arg3
  for(argc = -1; words != 0x0;)
  {
    argc++
    word = @cast(words, "WORD_LIST")->word->word
    bash_args[argc] = user_string(word)
    words = @cast(words, "WORD_LIST")->next
  }
}

